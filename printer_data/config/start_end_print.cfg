######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
  RESPOND MSG="Der 3D-Druck wird gestartet." color="accent"
  # M355 S1 ;Gehäuselicht an
  _CASELIGHT_ON
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  M104 S{EXTRUDER_TEMP} ;Start heating extruder
  
  G92 E0 ;zero the extruded length 
  G21 ;metric values

  G90 ;absolute positioning
  G28 X0 Y0 Z0 ;move X/Y/Z to min endstops

  G91 ;relative positioning
  G1 Z15.0 F9000 ;move the platform down 15mm

  G90 ;absolute positioning
  M82 ;set extruder to absolute mode

  M109 S{EXTRUDER_TEMP} ;Wait for extruder to reach temp before proceeding
  
  M107 ;start with the fan off
  #G1 F200 E2 ;extrude 2mm of feed stock
  G92 E0 ;zero the extruded length again
  # Put printing message on LCD screen
  RESPOND MSG="Der 3D-Druck wurde gestartet." color="accent"


[gcode_macro END_PRINT]
gcode:
  RESPOND MSG="Der 3D-Druck wird beendet." color="accent"
  G90 ;absolute positioning
  # Move nozzle away from print and bed down to 130
  RESPOND MSG="X/Y auf 0 und Druckbett nach unten zu {printer["gcode_macro global"].position_max_z - 5} fahren." color="accent"
  G1 X0 Y0
  G1 Z{printer["gcode_macro global"].position_max_z - 5} F300
  # Set coordinates to relative
  G91 
  # Retract filament 2 mm to prevent oozing
  G1 E-2 F1800

  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0

  # M84 ; Disable steppers
  M107 ;Fan off
  M150 R0 B0 U255 W0
  RESPOND MSG="Der 3D-Druck wurde ohne Druckerfehler beendet." color="accent"


[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  RESPOND MSG="Macro CANCEL_PRINT aus start_end.cfg wurde aufgerufen." color="accent"
  RESPOND MSG="Der 3D-Druck wird abgebrochen." color="accent"

  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  
  G90 ;absolute positioning
  # Move nozzle away from print and bed down to 130
  RESPOND MSG="X/Y auf 0 und Druckbett nach unten zu {printer["gcode_macro global"].position_max_z - 5} fahren." color="accent"
  G1 X0 Y0
  G1 Z{printer["gcode_macro global"].position_max_z - 5} F300
  # Set coordinates to relative
  G91 
  # Retract filament 2 mm to prevent oozing
  G1 E-2 F1800

  ;set part fan speed to zero.
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  CLEAR_PAUSE
  CANCEL_PRINT_BASE
  RESPOND MSG="Der 3D-Druck wurde abgebrochen." color="accent"

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}




